#!/usr/bin/env python
#
# Check P2Pool Bitcoin Miner Stats
#
# This script connects to the p2pool server's HTTP interface and parses the
# /local_stats path for determining the average hash rate of a miner.
#
# Author: Darryl Ross <darryl@afoyi.com>
# License: GNU GPL v3
#
# Usage:
# check_p2pool_bitcoin_miner
#   - Provide the hash rate for the entire server. Returns a Nagios 'OK' status.
#
# check_p2pool_bitcoin_miner -a
#   - Provide a list of miners on the server and their current effective rate.
#
# check_p2pool_bitcoin_miner <username>
#   - Provide the hash rate of a single miner. Returns a Nagios 'OK' status.
#
# check_p2pool_bitcoin_miner <username> <critical> <warning>
#   - Provide the hash rate of a single miner. Returns a Nagios status
#     depending on the detected effective hash rate. <critical> and <warning> are
#     in MH/s.

import json, sys
from urllib import urlopen


URL_STATS = 'http://localhost.org:9332/local_stats'

def parse_stats():
    conn = urlopen(URL_STATS)
    if conn.code != 200:
        print 'Error occured reading data (received code %d) ...' % conn.code
        sys.exit(1)
    json_dict = json.loads(conn.read())
    data = json_dict['miner_hash_rates']
    for key in json_dict['miner_dead_hash_rates'].keys():
        if not data.has_key(key):
            data[key] = 0.00
        data[key] -= json_dict['miner_dead_hash_rates'][key]
    return data

def print_string(alert_type, miner_name, miner_rate):
    print 'MINER %s: %s effective 1 hour average is %3.2f MH/s' % (alert_type, miner_name, miner_rate/1000000)


# ---------------------------------------------------------------------------
MINERS = parse_stats()

# No arguments, total node hashrate, no limits
if len(sys.argv) == 1:
    total = sum(MINERS.values())
    print_string('OK', 'Complete network', total)
    sys.exit(0)

# miner username provided
elif len(sys.argv) == 2 or len(sys.argv) == 4:
    miner = sys.argv[1]
    if miner == '-a':
        for miner in sorted(MINERS.keys()):
            print_string('STAT ONLY', miner, MINERS[miner])
        sys.exit(0)
    if not miner in MINERS.keys():
        print 'MINER CRITICAL: Miner %s has not mined in the last hour' % miner
        sys.exit(2)
    if len(sys.argv) == 2:
        print_string('OK', miner, MINERS[miner])
        sys.exit(0)
    elif MINERS[miner] <= float(sys.argv[2])*1000000:
        print_string('CRITICAL', miner, MINERS[miner])
        sys.exit(2)
    elif MINERS[miner] <= float(sys.argv[3])*1000000:
        print_string('WARNING', miner, MINERS[miner])
        sys.exit(1)
    else:
        print_string('OK', miner, MINERS[miner])
        sys.exit(0)

